#!/bin/bash

# Sapphire Bot Initizliazation Script

# Check if a project name is provided
if [ -z "$1" ]; then
    echo "Please provide a project name."
    echo "Usage: $0 <project_name>"
    exit 1
fi

# Use the provided project name
PROJECT_NAME=$1

# Create the project directory.
mkdir "$PROJECT_NAME"
cd "$PROJECT_NAME"

# Install NPM Packages
npm init -y
npm i discord.js
npm i @sapphire/framework
npm i mongoose
npm i node-schedule

# Set up the project structure
mkdir "src"
mkdir src/commands src/listeners src/preconditions src/utils src/data
touch src/Bot.js src/Main.js src/config.json src/Jobs.js Procfile .gitignore .prettierignore

# Add basic code to Main.js
cat <<EOF > src/Main.js
const mongoose = require("mongoose");
const Bot = require("./Bot");
const Jobs = require("./Jobs");

//? Process Attributes/Settings =============================================
let port = process.env.PORT || 3000;
const isTestMode = false;

//? Initialization ======================================================
async function Main(isTestMode) {
  // Login to Bot client.
  await Bot.login(isTestMode);

  // Init all scheduled jobs.
  // await Jobs();

  // Login to database.
  if (isTestMode) {
    let config = require("./config.json");
    mongoose.connect(config.DatabaseLoginString);
    mongoose.connection.once("open", async () => {
      console.log("\x1b[32m", "[âœ…] Connected to Database!", "\x1b[0m");
    });
  } else {
    mongoose.connect(process.env.DB_Connection_String);
    mongoose.connection.once("open", async () => {
      console.log("\x1b[32m", "[âœ…] Connected to Database!", "\x1b[0m");
    });
  }
  mongoose.Promise = global.Promise;
}

Main(isTestMode);
EOF

# Add basic code to Bot.js
cat <<EOF > src/Bot.js
const { SapphireClient } = require("@sapphire/framework");
const { GatewayIntentBits } = require('discord.js');
let DBot;
let user;

class Bot {
  constructor() {
    // Instantiate a new instance of the bot.
    DBot = new SapphireClient({
      intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildMessageReactions,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildIntegrations,
        GatewayIntentBits.MessageContent
      ],
      defaultPrefix: ";",
      presence: {
        activities: [{ name: ";cmds | Pizza & STK ðŸ˜Ž", type: "LISTENING" }],
      },
    });
    // Set attributes.
    user = DBot.user;
  }

  // Login using the bot token.
  //! Must be called to utilize any of the bot functions.
  async login(isTestMode) {
    if (isTestMode) {
      let config = require("./config.json");
      await DBot.login(config.testingToken);
      console.log(
        "\x1b[33m",
        "[â›”] This bot is operating in testing mode.",
        "\x1b[0m",
      );
    } else {
      await DBot.login(process.env.BOT_TOKEN);
      console.log(
        "\x1b[33m",
        "[â›”] This bot is operating in a production environment.",
        "\x1b[0m",
      );
    }
  }

  getDBot() {
    return DBot;
  }

  async setActivity(name, type) {
    return await user.setActivity(`${name}`, { type: `${type}` });
  }

  async setAvatar(imagePath) {
    return await user.setAvatar(imagePath);
  }

  async setPresence(name, status) {
    return await user.setPresence({
      activities: [{ name: `${name}` }],
      status: `${status}`,
    });
  }

  async setStatus(status) {
    return await user.setStatus(`${status}`);
  }
}

// Export the singleton instance of the bot.
const DBotInstance = new Bot();
Object.freeze(DBotInstance);
module.exports = DBotInstance;
EOF

# Set up .gitignore file.
cat <<EOF > .gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stupid mac file
.DS_Store

# Config
private_config.json
config.json

# Tests
tests

sample_data.json
EOF

# Set up .prettierignore file.
cat <<EOF > .gitignore
# Ignore artifacts:
build
coverage
EOF

# Set up Procfile
cat <<EOF > Procfile
web: node src/Main.js
EOF

# Initialize the directory for git.
git init

echo "Sapphire bot structure initialized successfully in $PROJECT_NAME."